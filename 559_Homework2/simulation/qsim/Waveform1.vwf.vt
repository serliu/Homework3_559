// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/30/2019 18:03:18"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Homework2_CRC_b
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Homework2_CRC_b_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg compute_enable;
reg init;
reg reset;
reg [7:0] u8;
// wires                                               
wire [15:0] crc_out;

// assign statements (if any)                          
Homework2_CRC_b i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.compute_enable(compute_enable),
	.crc_out(crc_out),
	.init(init),
	.reset(reset),
	.u8(u8)
);
initial 
begin 
#1000000 $finish;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 

// compute_enable
initial
begin
	compute_enable = 1'b1;
	compute_enable = #240000 1'b0;
end 

// init
initial
begin
	init = 1'b1;
	init = #80000 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 
// u8[ 7 ]
initial
begin
	u8[7] = 1'b0;
	u8[7] = #80000 1'b1;
	u8[7] = #120000 1'b0;
	u8[7] = #20000 1'b1;
	u8[7] = #20000 1'b0;
end 
// u8[ 6 ]
initial
begin
	u8[6] = 1'b0;
	u8[6] = #80000 1'b1;
	u8[6] = #160000 1'b0;
end 
// u8[ 5 ]
initial
begin
	u8[5] = 1'b0;
	u8[5] = #80000 1'b1;
	u8[5] = #120000 1'b0;
end 
// u8[ 4 ]
initial
begin
	u8[4] = 1'b0;
	u8[4] = #80000 1'b1;
	u8[4] = #160000 1'b0;
end 
// u8[ 3 ]
initial
begin
	u8[3] = 1'b0;
	u8[3] = #100000 1'b1;
	u8[3] = #80000 1'b0;
	u8[3] = #40000 1'b1;
	u8[3] = #20000 1'b0;
end 
// u8[ 2 ]
initial
begin
	u8[2] = 1'b0;
	u8[2] = #100000 1'b1;
	u8[2] = #80000 1'b0;
	u8[2] = #40000 1'b1;
	u8[2] = #20000 1'b0;
end 
// u8[ 1 ]
initial
begin
	u8[1] = 1'b0;
	u8[1] = #100000 1'b1;
	u8[1] = #80000 1'b0;
	u8[1] = #20000 1'b1;
	u8[1] = #20000 1'b0;
end 
// u8[ 0 ]
initial
begin
	u8[0] = 1'b0;
	u8[0] = #100000 1'b1;
	u8[0] = #80000 1'b0;
end 
endmodule

